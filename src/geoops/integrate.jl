# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    integrate(data, var; rank=nothing)

Integrate geospatial `data` for variable `var` over geometries of
given `rank`. Default rank is the parametric dimension of the
underlying geospatial domain.
"""
function integrate(t::AbstractGeoTable, vars...; rank=nothing)
  # domain and vertex table
  ùíü = domain(t)
  ùíØ = values(t, 0)

  valid = Tables.schema(ùíØ).names
  @assert vars ‚äÜ valid "invalid variables for vertex table"

  # vertices and topology
  vert = vertices(ùíü)
  topo = topology(ùíü)

  # retrieve columns
  cols = Tables.columns(ùíØ)
  vals = [Tables.getcolumn(cols, var) for var in vars]

  # rank of integration
  R = isnothing(rank) ? paramdim(ùíü) : rank

  # loop over faces
  table = map(faces(topo, R)) do face
    # perform integration of all variables
    ints = _integrate(face, vert, vals)

    # row of table with results
    (; zip(vars, ints)...)
  end

  GeoTable(ùíü, Dict(R => table))
end

# The surface integral ‚à´fdA over a 2D geometry can be
# expressed as ‚à´·µ§‚à´·µ•f(u,v)||r·µ§√ór·µ•||dudv where the vector
# r = [x(u,v), y(u,v), z(u,v)] lives on the geometry and
# where r·µ§ = ‚àÇr/‚àÇu and r·µ• = ‚àÇr/‚àÇv are partial derivatives
# with respect to parameters u and v.
#
# For triangles, we can approximate functions linearly
# as f(u,v) = Œ∏‚ÇÄ + Œ∏‚ÇÅu + Œ∏‚ÇÇv using the values at the
# three vertices. This is a 3x3 linear system with
# analytical solution hard-coded below:
#
# |1 0 0| |Œ∏‚ÇÄ|   |f‚ÇÅ|
# |1 1 0| |Œ∏‚ÇÅ| = |f‚ÇÇ|
# |1 0 1| |Œ∏‚ÇÇ|   |f‚ÇÉ|
#
# Œ∏‚ÇÄ = f‚ÇÅ, Œ∏‚ÇÅ = f‚ÇÇ-f‚ÇÅ, Œ∏‚ÇÇ = f‚ÇÉ-f‚ÇÅ
#
# f(u,v) = f‚ÇÅ + (f‚ÇÇ-f‚ÇÅ)u + (f‚ÇÉ-f‚ÇÅ)v
#
# Coordinate functions can be approximated with the same
# system of equations (isometric approximation):
#
# x(u,v) = x‚ÇÅ + (x‚ÇÇ-x‚ÇÅ)u + (x‚ÇÉ-x‚ÇÅ)v
# y(u,v) = y‚ÇÅ + (y‚ÇÇ-y‚ÇÅ)u + (y‚ÇÉ-y‚ÇÅ)v
# z(u,v) = z‚ÇÅ + (z‚ÇÇ-z‚ÇÅ)u + (z‚ÇÉ-z‚ÇÅ)v
#
# Consequently, we have the following constant:
#
# r·µ§ = [(x‚ÇÇ-x‚ÇÅ), (y‚ÇÇ-y‚ÇÅ), (z‚ÇÇ-z‚ÇÅ)]
# r·µ• = [(x‚ÇÉ-x‚ÇÅ), (y‚ÇÉ-y‚ÇÅ), (z‚ÇÉ-z‚ÇÅ)]
#
# ||r·µ§√ór·µ•|| = ||(p‚ÇÇ-p‚ÇÅ)√ó(p‚ÇÉ-p‚ÇÅ)|| = c
#
# where p‚ÇÅ, p‚ÇÇ and p‚ÇÉ are the three vertices.
#
# Finally, for the limits of integration u ‚àà [0,1]
# and v ‚àà [0,1-u] we can solve the integrand as:
#
# ‚à´·µ§(‚à´·µ•f(u,v)dv)dv = ‚à´·µ§(f‚ÇÅ(1-u) + (f‚ÇÇ-f‚ÇÅ)u(1-u) + (f‚ÇÉ-f‚ÇÅ)(1-u)¬≤/2)du
#                  = ‚à´·µ§((f‚ÇÅ+f‚ÇÉ)/2 + (f‚ÇÇ-f‚ÇÉ-f‚ÇÅ)u + (f‚ÇÅ+f‚ÇÉ-2f‚ÇÇ)u¬≤/2)du
#                  = (f‚ÇÅ+f‚ÇÉ)/2 + (f‚ÇÇ-f‚ÇÉ-f‚ÇÅ)/2 + (f‚ÇÅ+f‚ÇÉ-2f‚ÇÇ)/6
#                  = (f‚ÇÅ+f‚ÇÇ+f‚ÇÉ)/6
#
# which leads to:
#
# ‚à´·µ§‚à´·µ•f(u,v)||r·µ§√ór·µ•||dudv = c(f‚ÇÅ+f‚ÇÇ+f‚ÇÉ)/6
function _integrate(face::Connectivity{<:Triangle}, vert, vals)
  i, j, k = indices(face)
  p·µ¢, p‚±º, p‚Çñ = vert[[i, j, k]]
  c = norm((p‚±º - p·µ¢) √ó (p‚Çñ - p·µ¢))
  [c * (f[i] + f[j] + f[k]) / 6 for f in vals]
end

# fallback method ignores geometry and simply averages
# values of the variables at the vertices
function _integrate(face, vert, vals)
  inds = collect(indices(face))
  [mean(val[inds]) for val in vals]
end
